# Generated by Django 2.0.7 on 2018-09-05 00:00

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, max_length=200, null=True, upload_to='avatar/%Y/%m', verbose_name='用户头像')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AppAuth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('my_user_id', models.IntegerField(unique=True, verbose_name='用户ID')),
                ('username', models.CharField(max_length=50, unique=True, verbose_name='用户名称')),
                ('app_perms', models.TextField(blank=True, null=True, verbose_name='应用权限')),
                ('app_group_perms', models.TextField(blank=True, null=True, verbose_name='应用组权限')),
                ('update_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='最近更新时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='描述备注')),
            ],
            options={
                'verbose_name': '应用授权表',
                'verbose_name_plural': '应用授权表',
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='AppGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_group_name', models.CharField(max_length=20, unique=True, verbose_name='应用组名称')),
                ('app_group_members', models.TextField(blank=True, null=True, verbose_name='应用组成员')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='描述备注')),
            ],
            options={
                'verbose_name': '应用发布组信息表',
                'verbose_name_plural': '应用发布组信息表',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='AppRelease',
            fields=[
                ('app_name', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='应用名称')),
                ('sys_type', models.CharField(blank=True, max_length=20, null=True, verbose_name='系统类型')),
                ('minion_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='minion_id')),
                ('app_path', models.CharField(blank=True, max_length=200, null=True, verbose_name='应用目录')),
                ('app_path_owner', models.CharField(blank=True, max_length=20, null=True, verbose_name='应用目录属主')),
                ('app_svn_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='SVN地址')),
                ('app_svn_user', models.CharField(blank=True, max_length=20, null=True, verbose_name='SVN账户')),
                ('app_svn_password', models.CharField(blank=True, max_length=20, null=True, verbose_name='SVN密码')),
                ('app_svn_co_path', models.CharField(blank=True, max_length=200, null=True, verbose_name='SVN检出目录')),
                ('app_svn_version', models.CharField(blank=True, max_length=50, null=True, verbose_name='应用svn版本')),
                ('app_svn_version_success', models.CharField(blank=True, max_length=50, null=True, verbose_name='最近一次发布成功svn版本')),
                ('execution_style', models.CharField(blank=True, max_length=20, null=True, verbose_name='多主机执行顺序')),
                ('operation_content', models.CharField(blank=True, max_length=200, null=True, verbose_name='操作内容')),
                ('operation_arguments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='操作参数')),
                ('app_backup_path', models.CharField(blank=True, max_length=200, null=True, verbose_name='应用备份目录')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='最近一次发布时间')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='描述备注')),
            ],
            options={
                'verbose_name': '应用发布信息表',
                'verbose_name_plural': '应用发布信息表',
                'ordering': ['create_time'],
            },
        ),
        migrations.CreateModel(
            name='AppReleaseLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='应用发布名称')),
                ('log_content', models.TextField(blank=True, null=True, verbose_name='日志内容')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('release_result', models.CharField(blank=True, max_length=20, null=True, verbose_name='发布结果')),
                ('username', models.CharField(blank=True, max_length=20, null=True, verbose_name='操作人')),
            ],
            options={
                'verbose_name': '应用发布日志表',
                'verbose_name_plural': '应用发布日志表',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='MinionList',
            fields=[
                ('minion_id', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='MinionID')),
                ('ip', models.CharField(blank=True, max_length=200, null=True, verbose_name='IP地址')),
                ('minion_version', models.CharField(blank=True, max_length=20, null=True, verbose_name='Minion版本')),
                ('system_issue', models.CharField(blank=True, max_length=200, null=True, verbose_name='系统版本')),
                ('sn', models.CharField(blank=True, max_length=200, null=True, verbose_name='SN')),
                ('cpu_num', models.IntegerField(blank=True, null=True, verbose_name='CPU核数')),
                ('cpu_model', models.CharField(blank=True, max_length=200, null=True, verbose_name='CPU型号')),
                ('sys', models.CharField(blank=True, max_length=200, null=True, verbose_name='系统类型')),
                ('kernel', models.CharField(blank=True, max_length=200, null=True, verbose_name='内核')),
                ('product_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='品牌名称')),
                ('ipv4_address', models.CharField(blank=True, max_length=900, null=True, verbose_name='ipv4地址')),
                ('mac_address', models.CharField(blank=True, max_length=900, null=True, verbose_name='mac地址')),
                ('localhost', models.CharField(blank=True, max_length=200, null=True, verbose_name='主机名')),
                ('mem_total', models.IntegerField(blank=True, null=True, verbose_name='内存大小')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='最近一次更新时间')),
                ('minion_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='Minion状态')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='描述备注')),
            ],
            options={
                'verbose_name': 'Minion列表',
                'verbose_name_plural': 'Minion列表',
                'ordering': ['minion_id'],
            },
        ),
        migrations.CreateModel(
            name='NetworkList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_name', models.CharField(max_length=50, unique=True, verbose_name='设备名称')),
                ('device_type', models.CharField(blank=True, choices=[('0', '二层交换机'), ('1', '三层交换机'), ('2', '防火墙'), ('3', '路由器'), ('4', 'WAF'), ('5', '网闸')], max_length=20, null=True, verbose_name='设备类型')),
                ('manage_ip', models.CharField(blank=True, max_length=200, null=True, verbose_name='管理IP')),
                ('product_name', models.CharField(blank=True, choices=[('0', 'H3C'), ('1', '华为'), ('2', '思科'), ('3', '中兴')], max_length=20, null=True, verbose_name='设备厂家')),
                ('product_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='产品型号')),
                ('sn', models.CharField(blank=True, max_length=100, null=True, verbose_name='序列号')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='最近一次更新时间')),
                ('idc_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='机房名称')),
                ('idc_num', models.CharField(blank=True, max_length=50, null=True, verbose_name='机柜号')),
                ('login_ip', models.CharField(blank=True, max_length=20, null=True, verbose_name='远程管理IP')),
                ('login_port', models.IntegerField(blank=True, null=True, verbose_name='远程管理端口')),
                ('login_user', models.CharField(blank=True, max_length=50, null=True, verbose_name='远程管理用户')),
                ('login_password', models.CharField(blank=True, max_length=20, null=True, verbose_name='远程管理密码')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='描述备注')),
            ],
            options={
                'verbose_name': '网络设备列表',
                'verbose_name_plural': '网络设备列表',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='NginxManage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(max_length=20, unique=True, verbose_name='IP地址')),
                ('vip', models.CharField(blank=True, max_length=20, null=True, verbose_name='VIP地址')),
                ('path', models.CharField(max_length=200, verbose_name='nginx目录')),
                ('conf_path', models.CharField(max_length=200, verbose_name='nginx.conf目录')),
                ('vhost_path', models.CharField(blank=True, max_length=200, null=True, verbose_name='vhost目录')),
                ('logs_path', models.CharField(blank=True, max_length=200, null=True, verbose_name='logs目录')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='最近一次更新时间')),
                ('nginx_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='nginx状态')),
                ('minion_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='minion_id')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='描述备注')),
            ],
            options={
                'verbose_name': 'nginx管理',
                'verbose_name_plural': 'nginx管理',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SaltCmdInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salt_cmd', models.CharField(max_length=100, verbose_name='命令')),
                ('salt_cmd_type', models.CharField(blank=True, max_length=20, null=True, verbose_name='类型')),
                ('salt_cmd_module', models.CharField(blank=True, max_length=200, null=True, verbose_name='模块')),
                ('salt_cmd_source', models.CharField(blank=True, max_length=200, null=True, verbose_name='命令来源')),
                ('salt_cmd_doc', models.TextField(blank=True, null=True, verbose_name='命令帮助信息')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='最近一次采集时间')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述备注')),
            ],
            options={
                'verbose_name': 'salt命令集表',
                'verbose_name_plural': 'salt命令集表',
                'ordering': ['salt_cmd_type', 'salt_cmd'],
            },
        ),
        migrations.CreateModel(
            name='SaltKeyList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minion_id', models.CharField(max_length=20, verbose_name='MinionID')),
                ('certification_status', models.CharField(max_length=20, verbose_name='认证状态')),
                ('update_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='最近一次更新时间')),
            ],
            options={
                'verbose_name': 'Salt-key信息表',
                'verbose_name_plural': 'Salt-key信息表',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ServerList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_name', models.CharField(max_length=50, unique=True, verbose_name='服务器名称')),
                ('server_type', models.CharField(blank=True, choices=[('0', '物理机'), ('1', '虚拟机')], max_length=20, null=True, verbose_name='服务器类型')),
                ('localhost', models.CharField(blank=True, max_length=50, null=True, verbose_name='主机名')),
                ('ip', models.CharField(blank=True, max_length=200, null=True, verbose_name='IP地址')),
                ('system_issue', models.CharField(blank=True, max_length=50, null=True, verbose_name='系统版本')),
                ('sn', models.CharField(blank=True, max_length=100, null=True, verbose_name='SN')),
                ('cpu_num', models.IntegerField(blank=True, null=True, verbose_name='CPU核数')),
                ('cpu_model', models.CharField(blank=True, max_length=100, null=True, verbose_name='CPU型号')),
                ('sys_type', models.CharField(blank=True, max_length=20, null=True, verbose_name='系统类型')),
                ('kernel', models.CharField(blank=True, max_length=50, null=True, verbose_name='内核')),
                ('product_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='品牌名称')),
                ('ipv4_address', models.CharField(blank=True, max_length=900, null=True, verbose_name='ipv4列表')),
                ('mac_address', models.CharField(blank=True, max_length=900, null=True, verbose_name='mac地址列表')),
                ('mem_total', models.IntegerField(blank=True, null=True, verbose_name='内存大小')),
                ('mem_explain', models.CharField(blank=True, max_length=200, null=True, verbose_name='内存说明')),
                ('disk_total', models.IntegerField(blank=True, null=True, verbose_name='磁盘大小')),
                ('disk_explain', models.CharField(blank=True, max_length=200, null=True, verbose_name='磁盘说明')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='最近一次更新时间')),
                ('minion_id', models.CharField(blank=True, max_length=20, null=True, verbose_name='minion_id')),
                ('idc_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='机房名称')),
                ('idc_num', models.CharField(blank=True, max_length=50, null=True, verbose_name='机柜号')),
                ('login_ip', models.CharField(blank=True, max_length=20, null=True, verbose_name='远程管理IP')),
                ('login_port', models.IntegerField(blank=True, null=True, verbose_name='远程管理端口')),
                ('login_user', models.CharField(blank=True, max_length=50, null=True, verbose_name='远程管理用户')),
                ('login_password', models.CharField(blank=True, max_length=20, null=True, verbose_name='远程管理密码')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='描述备注')),
            ],
            options={
                'verbose_name': '主机列表',
                'verbose_name_plural': '主机列表',
                'ordering': ['id'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='saltcmdinfo',
            unique_together={('salt_cmd', 'salt_cmd_type')},
        ),
    ]
